"""
This type stub file was generated by pyright.
"""

"""Contains classes for generating hatch patterns."""

class HatchPatternBase:
    """The base class for a hatch pattern."""

    ...

class HorizontalHatch(HatchPatternBase):
    def __init__(self, hatch, density) -> None: ...
    def set_vertices_and_codes(self, vertices, codes):  # -> None:
        ...

class VerticalHatch(HatchPatternBase):
    def __init__(self, hatch, density) -> None: ...
    def set_vertices_and_codes(self, vertices, codes):  # -> None:
        ...

class NorthEastHatch(HatchPatternBase):
    def __init__(self, hatch, density) -> None: ...
    def set_vertices_and_codes(self, vertices, codes):  # -> None:
        ...

class SouthEastHatch(HatchPatternBase):
    def __init__(self, hatch, density) -> None: ...
    def set_vertices_and_codes(self, vertices, codes):  # -> None:
        ...

class Shapes(HatchPatternBase):
    filled = ...
    def __init__(self, hatch, density) -> None: ...
    def set_vertices_and_codes(self, vertices, codes):  # -> None:
        ...

class Circles(Shapes):
    def __init__(self, hatch, density) -> None: ...

class SmallCircles(Circles):
    size = ...
    def __init__(self, hatch, density) -> None: ...

class LargeCircles(Circles):
    size = ...
    def __init__(self, hatch, density) -> None: ...

class SmallFilledCircles(Circles):
    size = ...
    filled = ...
    def __init__(self, hatch, density) -> None: ...

class Stars(Shapes):
    size = ...
    filled = ...
    def __init__(self, hatch, density) -> None: ...

_hatch_types = ...

def get_path(hatchpattern, density=...):  # -> Path:
    """
    Given a hatch specifier, *hatchpattern*, generates Path to render
    the hatch in a unit square.  *density* is the number of lines per
    unit square.
    """
    ...
