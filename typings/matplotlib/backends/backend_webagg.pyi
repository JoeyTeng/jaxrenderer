"""
This type stub file was generated by pyright.
"""

import threading

import matplotlib as mpl
from matplotlib.backend_bases import _Backend
import tornado
import tornado.web
import tornado.websocket

from . import backend_webagg_core as core

"""
Displays Agg images in the browser, with interactivity
"""

@mpl._api.deprecated("3.7")
class ServerThread(threading.Thread):
    def run(self):  # -> None:
        ...

webagg_server_thread = ...

class FigureManagerWebAgg(core.FigureManagerWebAgg):
    _toolbar2_class = core.NavigationToolbar2WebAgg
    @classmethod
    def pyplot_show(cls, *, block=...):  # -> None:
        ...

class FigureCanvasWebAgg(core.FigureCanvasWebAggCore):
    manager_class = FigureManagerWebAgg

class WebAggApplication(tornado.web.Application):
    initialized = ...
    started = ...

    class FavIcon(tornado.web.RequestHandler):
        def get(self):  # -> None:
            ...

    class SingleFigurePage(tornado.web.RequestHandler):
        def __init__(
            self, application, request, *, url_prefix=..., **kwargs
        ) -> None: ...
        def get(self, fignum):  # -> None:
            ...

    class AllFiguresPage(tornado.web.RequestHandler):
        def __init__(
            self, application, request, *, url_prefix=..., **kwargs
        ) -> None: ...
        def get(self):  # -> None:
            ...

    class MplJs(tornado.web.RequestHandler):
        def get(self):  # -> None:
            ...

    class Download(tornado.web.RequestHandler):
        def get(self, fignum, fmt):  # -> None:
            ...

    class WebSocket(tornado.websocket.WebSocketHandler):
        supports_binary = ...
        def open(self, fignum):  # -> None:
            ...
        def on_close(self):  # -> None:
            ...
        def on_message(self, message):  # -> None:
            ...
        def send_json(self, content):  # -> None:
            ...
        def send_binary(self, blob):  # -> None:
            ...
    def __init__(self, url_prefix=...) -> None: ...
    @classmethod
    def initialize(cls, url_prefix=..., port=..., address=...):  # -> None:
        ...
    @classmethod
    def start(cls):  # -> None:
        ...

def ipython_inline_display(figure): ...
@_Backend.export
class _BackendWebAgg(_Backend):
    FigureCanvas = FigureCanvasWebAgg
    FigureManager = FigureManagerWebAgg
