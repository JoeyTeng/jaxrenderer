"""
This type stub file was generated by pyright.
"""

class Substitution:
    """
    A decorator that performs %-substitution on an object's docstring.

    This decorator should be robust even if ``obj.__doc__`` is None (for
    example, if -OO was passed to the interpreter).

    Usage: construct a docstring.Substitution with a sequence or dictionary
    suitable for performing substitution; then decorate a suitable function
    with the constructed object, e.g.::

        sub_author_name = Substitution(author='Jason')

        @sub_author_name
        def some_function(x):
            "%(author)s wrote this function"

        # note that some_function.__doc__ is now "Jason wrote this function"

    One can also use positional arguments::

        sub_first_last_names = Substitution('Edgar Allen', 'Poe')

        @sub_first_last_names
        def some_function(x):
            "%s %s wrote the Raven"
    """

    def __init__(self, *args, **kwargs) -> None: ...
    def __call__(self, func): ...
    def update(self, *args, **kwargs):  # -> None:
        """
        Update ``self.params`` (which must be a dict) with the supplied args.
        """
        ...

class _ArtistKwdocLoader(dict):
    def __missing__(self, key): ...

class _ArtistPropertiesSubstitution(Substitution):
    """
    A `.Substitution` with two additional features:

    - Substitutions of the form ``%(classname:kwdoc)s`` (ending with the
      literal ":kwdoc" suffix) trigger lookup of an Artist subclass with the
      given *classname*, and are substituted with the `.kwdoc` of that class.
    - Decorating a class triggers substitution both on the class docstring and
      on the class' ``__init__`` docstring (which is a commonly required
      pattern for Artist subclasses).
    """

    def __init__(self) -> None: ...
    def __call__(self, obj):  # -> type:
        ...

def copy(source):  # -> (target: Unknown) -> Unknown:
    """Copy a docstring from another source function (if present)."""
    ...

interpd = ...
